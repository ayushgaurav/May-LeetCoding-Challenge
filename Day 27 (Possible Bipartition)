//  https://leetcode.com/problems/possible-bipartition/


class Solution {
public:
    bool possibleBipartition(int N, vector<vector<int>>& dislikes) {
        
        vector<vector<int>> adj(N+1);
        vector<int> color(N+1,0);
        vector<bool> explored(N+1,false);
        
        for(auto i:dislikes)
        {
            adj[i[0]].push_back(i[1]);
            adj[i[1]].push_back(i[0]);
        }
        
        queue<int> q;
        for(int i=1;i<=N;i++)
        {
            if(!explored[i])
            {
                color[i]=1;
                q.push(i);
                while(!q.empty())
                {
                    int t=q.front();
                    q.pop();
                    if(explored[t])
                        continue;
                    explored[t]=true;
                    for(auto j:adj[t])
                    {
                        
                        if(color[t]==color[j])
                            return false;
                        if(color[t]==1)
                            color[j]=2;
                        else
                            color[j]=1;
                        q.push(j);
                    }
                }
            }
        }
        return true;
        
    }
};
