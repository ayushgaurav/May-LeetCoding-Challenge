// https://leetcode.com/problems/implement-trie-prefix-tree/

class Trie {
public:
    /** Initialize your data structure here. */
    
    unordered_map<char,Trie*> next;
    bool endofword;
    
    Trie() {
        endofword=false;
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        
        
        Trie *node= this;
        for(char ch:word)
        {
            if(!node->next.count(ch))
                node->next[ch]= new Trie();
            node=node->next[ch];
        }
        node->endofword= true;
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        
        Trie *node = this;
        
        for(char ch: word)
        {
            if(!node->next.count(ch))
                return false;
            node=node->next[ch];
        }
        
        return node->endofword;
        
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        
        Trie *node = this;
        
        for(char ch:prefix)
        {
            if(!node->next.count(ch))
                return false;
            node = node->next[ch];
        }
        
        return true;
        
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */
